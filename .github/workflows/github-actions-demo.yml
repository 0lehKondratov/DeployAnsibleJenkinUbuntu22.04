name: CR OS BUILDER
on:
  create:
env:
  ANSIBLE_HOST_KEY_CHECKING: False
jobs:
  packer-ubuntu:
    container:
    if: ${{ startsWith(github.ref, 'refs/tags/ubuntu-v') }}
    runs-on: [self-hosted]
    name: packer-ubuntu
    services:
      file-server:
        image: httpd:2.4
        ports:
          - 80:80
        volumes:
          - ${{github.workspace}}/packer-ubuntu/http/:/usr/local/apache2/htdocs/

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Create Vars file
        working-directory: packer-ubuntu
        run: |
          echo 'vm_name ="${{env.RELEASE_VERSION}}"' >> variables.auto.pkrvars.hcl
          echo 'ssh_password ="${{secrets.UBUNTU_PASS}}"' >> variables.auto.pkrvars.hcl
          echo 'proxmox_pass ="${{secrets.PROX_PASS}}"' >> variables.auto.pkrvars.hcl
          echo 'vm_id ="9998"' >> variables.auto.pkrvars.hcl

      
      - name: Create Anisble inventory
        working-directory: ansible_build
        run: |
          echo 'ansible_ssh_pass=${{secrets.PROX_PASS}}' >> inv.yml


      - name: Remove old Ubuntu Template
        uses: ./packer-action/
        with:
          command: ansible-playbook
          arguments: -i inv.yml
          working_directory: ansible_build
          target: prepare-proxmox-node/remove-ubuntu-template.yml

      # validate templates
      - name: Validate Template
        uses: ./packer-action/
        with:
          command: packer validate 
          arguments: -syntax-only -var-file=variables.auto.pkrvars.hcl
          target: ubuntu-20.04.pkr.hcl
          working_directory: packer-ubuntu

      # build artifact
      - name: Build Artifact
        uses: ./packer-action/
        with:
          command: packer build
          arguments: -color=true -on-error=ask -var-file=variables.auto.pkrvars.hcl
          target: ubuntu-20.04.pkr.hcl
          working_directory: packer-ubuntu

      - name: Move Template to CR_TOOLS storage
        uses: ./packer-action/
        with:
          command: ansible-playbook
          arguments: -i inv.yml
          working_directory: ansible_build
          target: prepare-template/prepare-ubuntu-template.yml
      
  packer-windows-uefi:
    container:
    if: ${{ startsWith(github.ref, 'refs/tags/uefi-windows-v') }}
    runs-on: [self-hosted]
    name: packer-windows-uefi

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Create Vars file
        working-directory: packer-windows-uefi
        run: |
          echo 'vm_name ="${{env.RELEASE_VERSION}}"' >> variables.auto.pkrvars.hcl
          echo 'ssh_password ="${{secrets.WINDOWS_PASS}}"' >> variables.auto.pkrvars.hcl
          echo 'proxmox_pass ="${{secrets.PROX_PASS}}"' >> variables.auto.pkrvars.hcl
          echo 'vm_id ="9999"' >> variables.auto.pkrvars.hcl

      - name: Create Anisble inventory
        working-directory: ansible_build
        run: |
          echo 'ansible_ssh_pass=${{secrets.PROX_PASS}}' >> inv.yml

      - name: Remove old Windows Template
        uses: ./packer-action/
        with:
          command: ansible-playbook
          arguments: -i inv.yml
          working_directory: ansible_build
          target: prepare-proxmox-node/remove-windows-template.yml

      # Build ISO for installer
      - name: Build ISO with Autounattended.xml
        working-directory: packer-windows-uefi
        run: |
          sudo apt install genisoimage -y && genisoimage -J -l -R -V "Label CD" -iso-level 4 -o Autounattend.iso floppy/windows

      - name: Copy ISO to proxmox
        working-directory: packer-windows-uefi
        run: |
          sudo apt install sshpass -y && sshpass -p "${{ secrets.PROX_PASS }}" scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no Autounattend.iso ${{ secrets.PROX_USER }}@10.91.31.230:/var/lib/vz/template/iso/
          

      # download Packer Windows Update Provisioner
      - name: Packer Init
        uses: ./packer-action/
        with:
          command: packer init
          target: UEFI-WIN-2022.pkr.hcl
          working_directory: packer-windows-uefi        

      # validate templates
      - name: Validate Template
        uses: ./packer-action/
        with:
          command: packer validate
          arguments: -syntax-only -var-file=variables.auto.pkrvars.hcl
          target: UEFI-WIN-2022.pkr.hcl
          working_directory: packer-windows-uefi

      # build artifact
      - name: Build Artifact
        uses: ./packer-action/
        with:
          command: packer build
          arguments: -color=true -on-error=ask -var-file=variables.auto.pkrvars.hcl
          target: UEFI-WIN-2022.pkr.hcl
          working_directory: packer-windows-uefi
        env:
          PACKER_LOG: 1

      # additional steps to process artifacts
      - name: Move Template to CR_TOOLS storage
        uses: ./packer-action/
        with:
          command: ansible-playbook
          arguments: -i inv.yml
          working_directory: ansible_build
          target: prepare-template/prepare-windows-template.yml
    
